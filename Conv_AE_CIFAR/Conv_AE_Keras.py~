
# coding: utf-8

# In[1]:

import numpy as np
from matplotlib import pyplot as plt
import pandas as pd

import keras
from keras.datasets import cifar10
from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D
from keras.models import Model


# In[2]:

(X, y), (X_test, y_test) = cifar10.load_data()
n_examples = 50000

# In[3]:

X = X/255.0
X_test = X_test/255.0

n_train = int(0.84*n_examples])
n_val = int(0.16*n_examples)

X_train = X[:n_train]
X_val = X[n_train:n_train+n_val]

y_train = y_train[:n_train]
y_val = y_val[n_train:n_train+n_val]

X_train = X_train.reshape((len(X_train), 32, 32, 3))
X_val = X_val.reshape((len(X_val), 32, 32, 3))
X_test = X_test.reshape(len(X_test), 32, 32, 3))

print X_train.shape, X_val.shape


# In[4]:

input_img = Input(shape=(32, 32, 3))

x = Conv2D(32, (5, 5), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(16, (5, 5), activation='relu', padding='same')(x)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)
encoded = MaxPooling2D((2, 2), padding='same')(x)

x = Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)
x = UpSampling2D((2, 2))(x)
x = Conv2D(16, (5, 5), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
x = Conv2D(32, (5, 5), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(3, (5, 5), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)

#################################################

autoencoder.compile(optimizer='adam', loss='mse', metrics = ['accuracy'])

hist = autoencoder.fit(X_train, X_train, epochs=50, batch_size=100, shuffle=True, validation_data=(X_val, X_val))

decoded_imgs = autoencoder.predict(X_test[:100])
print decoded_imgs.shape

# In[ ]:

LABELS = {}
LABELS[0] = 'airplane'
LABELS[1] = 'automobile'
LABELS[2] = 'bird'
LABELS[3] = 'cat'
LABELS[4] = 'deer'
LABELS[5] = 'dog'
LABELS[6] = 'frog'
LABELS[7] = 'horse'
LABELS[8] = 'ship'
LABELS[9] = 'truch'

for ix in range(100):
    plt.figure(ix)
    plt.subplot(1,2,1)
    plt.title('Original')
    plt.imshow(X_test[ix])
    plt.subplot(1,2,2)
    plt.title('Conv_AutoEncoder Regen')
    plt.imshow(decoded_imgs[ix])
    plt.savefig(('#' + str(ix) + ': Conv_AE-Regen ' + LABELS[y_test[ix][0]] + '.png'), dpi=326)
    plt.close()


# In[ ]:
